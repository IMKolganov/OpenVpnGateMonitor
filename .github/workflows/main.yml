name: Build and Deploy OpenVPNGateMonitor

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: [self-hosted, raspberrypi-2]
    name: Build and Deploy on Raspberry Pi
    env:
      DEPLOY_ENV: development
      TARGETARCH: arm64
      BUILD_CONFIGURATION: Debug
      ASPNETCORE_ENVIRONMENT: Development
      TELEGRAMBOT_PORT: 88

    steps:
      - name: Clean workspace before checkout
        run: |
          echo "Cleaning up existing backend and frontend directories..."
          rm -rf backend frontend
      
      - name: Checkout full repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
          lfs: true
          persist-credentials: false

      - name: Build and start services with Docker Compose
        run: |
          docker compose down || true
          docker compose up --build -d
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DB_CONNECTION_STRING_DATAGATE: ${{ secrets.DATAGATE_DB }}

          # General env
          DEPLOY_ENV: ${{ env.DEPLOY_ENV }}
          TELEGRAMBOT_PORT: ${{ env.TELEGRAMBOT_PORT }}
          TARGETARCH: ${{ env.TARGETARCH }}
          BUILD_CONFIGURATION: ${{ env.BUILD_CONFIGURATION }}
          ASPNETCORE_ENVIRONMENT: ${{ env.ASPNETCORE_ENVIRONMENT }}

          # Telegram Bot
          TELEGRAMBOT_BOT_TOKEN: ${{ secrets.TELEGRAMBOT_BOT_TOKEN }}
          TELEGRAM_WEBHOOK: ${{ secrets.TELEGRAM_WEBHOOK }}

          # Dashboard API
          DASHBOARDAPI_URL: ${{ secrets.DASHBOARDAPI_URL }}
          DASHBOARDAPI_CLIENTID: ${{ secrets.DASHBOARDAPI_CLIENTID }}
          DASHBOARDAPI_CLIENTSECRET: ${{ secrets.DASHBOARDAPI_CLIENTSECRET }}

          # Elasticsearch
          ELASTIC_URI: ${{ secrets.ELASTIC_URI }}
          ELASTIC_USERNAME: ${{ secrets.ELASTIC_USERNAME }}
          ELASTIC_PASSWORD: ${{ secrets.ELASTIC_PASSWORD }}

      - name: Verify running containers
        run: |
          echo "Checking running containers..."
          docker ps | grep openvpn || echo "ERROR: Containers are not running!"