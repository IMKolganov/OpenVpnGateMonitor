version: "3.9"

services:
  backend:
    image: imkolganov/openvpn-gate-monitor-backend:latest
    pull_policy: always
    container_name: open-vpn-gate-monitor-backend
    restart: always
    networks:
      - openvpn_network
      - backend_network
    volumes:
      - openvpn_data_tcp:/openvpn-tcp
      - openvpn_data_udp:/openvpn-udp
      - geolite_data:/app/GeoLite
    ports:
      - "5581:5581"
    depends_on:
      - postgres_backend
    environment:
      ASPNETCORE_URLS: http://0.0.0.0:5581
      DOTNET_RUNNING_IN_CONTAINER: "true"
      DB_CONNECTION_STRING_DATAGATE: ${DB_CONNECTION_STRING_DATAGATE:-Host=postgres_backend;Port=5432;Database=datagate_backend;Username=backend_user;Password=securepassword_backend}
      DB_DEFAULT_SCHEMA: xgb_dashopnvpn
      DB_MIGRATION_TABLE: __EFMigrationsHistoryDashboardVpn
      JWT_SECRET:

  frontend:
    image: imkolganov/openvpn-gate-monitor-frontend:latest
    pull_policy: always
    container_name: open-vpn-gate-monitor-frontend
    restart: always
    networks:
      - openvpn_network
    ports:
      - "5582:5582"
    depends_on:
      - backend
    environment:
      BACKEND_URL: http://backend:5581

  telegrambot:
    image: imkolganov/openvpn-gate-monitor-telegrambot:latest
    pull_policy: always
    container_name: open-vpn-gate-monitor-telegrambot
    restart: always
    networks:
      - backend_network
      - tgbot_network
    depends_on:
      - postgres_telegrambot
    environment:
      ASPNETCORE_URLS: http://0.0.0.0:${TELEGRAMBOT_PORT}:${TELEGRAMBOT_PORT}
      TELEGRAMBOT_PORT: ${TELEGRAMBOT_PORT:?TELEGRAMBOT_PORT is required}
      TELEGRAMBOT_BOT_TOKEN: ${TELEGRAMBOT_BOT_TOKEN}
      HOST_ADDRESS: ${HOST_ADDRESS}
      USE_CERTIFICATE: ${USE_CERTIFICATE:-true}
      AUTO_GENERATE_CERTIFICATE: ${AUTO_GENERATE_CERTIFICATE:-true}      
      DB_CONNECTION_STRING: Host=postgres_telegrambot;Port=5432;Database=datagate_telegrambot;Username=telegrambot_user;Password=securepassword_telegrambot
      DB_DEFAULT_SCHEMA: xgb_botvpndev
      DB_MIGRATION_TABLE: __EFMigrationsHistoryTelegramBot
      CERTIFICATE_PFX_PATH: /app/datagatetgbot.pfx
      CERTIFICATE_PEM_PATH: /app/datagatetgbot.pem

      # ðŸ”§ Dashboard API config
      DASHBOARDAPI_URL: ${DASHBOARDAPI_URL}
      DASHBOARDAPI_CLIENTID: ${DASHBOARDAPI_CLIENTID}
      DASHBOARDAPI_CLIENTSECRET: ${DASHBOARDAPI_CLIENTSECRET}

      # ðŸ“Š Elasticsearch config
      ELASTIC_URI: ${ELASTIC_URI}
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTIC_INDEX_FORMAT: DataGateVPNBot-dev-logs-{0:yyyy.MM.dd}
    ports:
      - "${TELEGRAMBOT_PORT}:${TELEGRAMBOT_PORT}"

  telegrambot_redis:
    image: redis:latest
    container_name: telegrambot_redis
    restart: always
    networks:
      - tgbot_network

  openvpn_udp:
    build:
      context: ./openvpn
      dockerfile: Dockerfile
    container_name: openvpn_udp
    restart: unless-stopped
    networks:
      - backend_network
    cap_add:
      - NET_ADMIN
    devices:
      - "/dev/net/tun:/dev/net/tun"
    volumes:
      - openvpn_data_udp:/openvpn-udp
    ports:
      - "1194:1194/udp"
    environment:
      DATA_DIR: /openvpn-udp
      PORT: "1194"
      PROTO: udp
      MGMT_PORT: "5092"

  openvpn_tcp:
    build:
      context: ./openvpn
      dockerfile: Dockerfile
    container_name: openvpn_tcp
    restart: unless-stopped
    networks:
      - backend_network
    cap_add:
      - NET_ADMIN
    devices:
      - "/dev/net/tun:/dev/net/tun"
    volumes:
      - openvpn_data_tcp:/openvpn-tcp
    ports:
      - "1195:1195"
    environment:
      DATA_DIR: /openvpn-tcp
      PORT: "1195"
      PROTO: tcp
      MGMT_PORT: "5093"

  postgres_backend:
    image: postgres:latest
    container_name: datagate_postgres_backend
    restart: always
    networks:
      - backend_network
    volumes:
      - postgres_data_backend:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: datagate_backend
      POSTGRES_USER: backend_user
      POSTGRES_PASSWORD: securepassword_backend

  postgres_telegrambot:
    image: postgres:latest
    container_name: datagate_postgres_telegrambot
    restart: always
    networks:
      - backend_network
    volumes:
      - postgres_data_telegrambot:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: datagate_telegrambot
      POSTGRES_USER: telegrambot_user
      POSTGRES_PASSWORD: securepassword_telegrambot

volumes:
  openvpn_data_tcp:
  openvpn_data_udp:
  postgres_data_backend:
  postgres_data_telegrambot:
  geolite_data:

networks:
  openvpn_network:
    driver: bridge
  backend_network:
    driver: bridge
  tgbot_network:
    driver: bridge
